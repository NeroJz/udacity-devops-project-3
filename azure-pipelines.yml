name: Azure Pipelines
trigger: none
variables:
  python.version: '3.7.6'
  appname: 'kumhoe-AppService'
  subscription: 'udacity-project-connection'
stages:
  # - stage: ProvisionIaC
  #   displayName: Provisioning Azure Resources
  #   jobs:
  #   - job: ProvisionAppService
  #     displayName: Provisioning App Service
  #     pool:
  #       vmImage: 'Ubuntu-18.04'
  #     steps:
  #     - task: DownloadSecureFile@1
  #       name: terraformtfvars
  #       displayName: Download terraform.tfvars
  #       inputs:
  #         secureFile: 'terraform.tfvars'

  #     - task: DownloadSecureFile@1
  #       name: maintf
  #       displayName: Download main.tf
  #       inputs:
  #         secureFile: 'main.tf'

  #     - task: InstallSSHKey@0
  #       name: InstallSSHKey
  #       displayName: Install SSH Key
  #       inputs:
  #         knownHostsEntry: 'default'
  #         sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC19L6GYKYW6buRhtCLBGsBCd73hziaEvsoKZJqD5D0KAmrMyKHMIBSI9V21NuVr/Wyf6VyAWruu7yc0pu996Izd29GHU4viakRSTDByhhi5IX1x2FfS/NKXWtG+ALUNMkfJ+98YqpqV9apAvEoEpDMtNC3UEnDzaI0CF3r4dzlGLeVbF6ya4XRD1HtANtoA5R+eYyWHSz089crrzXvXg7BQywVioiGTw1OiHxv3GWKyKiIdvJYTWWLGro1npqm5GfGUxPNpJPSgAAHk4h1hDDAv/D3aXgMCBuuU6tOE1KiX6+04pcE35j5HTIH9YIN+5Dtf8lfy/okJEM/E1tBTpVchs9p0YGetElsmr6Ghs7IKzF99L714/gNgjIllZ3yeUFemsmRwYKgPmjEhQfawglbORQafXqUsDBIOTHknRPDE6yv9aQbf7RHDXQ6XGCSGjQ/vBE6rw//fk2t7gYcDsgv4wppasBMTa4BygUWK+tye7B1k8cmkwPJgW8aHtK1PQbsDgYl+GNjWYtRXr79PfLD5Gtda5dJCwocD5FReSok437AbHQblgkz7b8YXyhLS3318dSmoGcKHUq4kZf7tCGu/YUH9sH68mcyJSu4XKm1nmA9SJ9nb8jn2nA8uRidjLVHYSxT6LRhcNUgSCbg8i0JDBfIT8IUjOUiazpFQVVALw== MacBookPro@MacBook-Pro.local'
  #         sshKeySecureFile: 'id_rsa'

  #     - task: Bash@3
  #       displayName: Copy terraform.tfvars
  #       inputs:
  #         targetType: 'inline'
  #         script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform

  #     - task: Bash@3
  #       displayName: Copy main.tf
  #       inputs:
  #         targetType: 'inline'
  #         script: cp $(Agent.TempDirectory)/main.tf $(System.DefaultWorkingDirectory)/terraform
      
  #     - task: TerraformInstaller@0
  #       displayName: Install Terraform
  #       inputs:
  #         terraformVersion: '1.1.4'

  #     - task: TerraformTaskV2@2
  #       inputs:
  #         provider: 'azurerm'
  #         command: 'init'
  #         backendServiceArm: $(subscription)
  #         backendAzureRmResourceGroupName: 'tfstate'
  #         backendAzureRmStorageAccountName: 'tfstate16825'
  #         backendAzureRmContainerName: 'tfstate'
  #         backendAzureRmKey: 'terraform.state'
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
  #     - task: TerraformTaskV2@2
  #       inputs:
  #         provider: 'azurerm'
  #         command: 'plan'
  #         environmentServiceNameAzureRM: $(subscription)
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
  #     - task: TerraformTaskV2@2
  #       inputs:
  #         provider: 'azurerm'
  #         command: 'apply'
  #         environmentServiceNameAzureRM: $(subscription)
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

  # - stage: Build
  #   displayName: Build FakeRestAPI
  #   jobs:
  #   - job: BuildFakerRest
  #     displayName: Build FakerRest Archive
  #     pool:
  #       vmImage: 'Ubuntu-18.04'
  #     steps:
  #     - task: ArchiveFiles@2
  #       displayName: 'Archive FakeRestAPI'
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
  #     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
  #       displayName: 'Upload FakerRestAPI Artifact'
  #       artifact: drop-fakerestapi
    
  #   - job: BuildSelenium
  #     displayName: Build UI Test Archive
  #     pool:
  #       vmImage: 'Ubuntu-18.04'
  #     steps:
  #     - task: ArchiveFiles@2
  #       displayName: 'Archive Selenium'
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/selenium'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.BuildId)/selenium.zip'
  #         replaceExistingArchive: true
  #     - upload: $(Build.BuildId)/selenium.zip
  #       displayName: 'Upload Selenium Artifact'
  #       artifact: selenium
  
  - stage: Deployment
    displayName: Deploy Artifact(s)
    jobs:
    # - deployment: FakeRestAPI
    #   displayName: Deploying FakeRestAPI from Artifact
    #   pool:
    #     vmImage: 'Ubuntu-18.04'
    #   environment: 'WEBAPP-TEST'
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #         - task: AzureWebApp@1
    #           displayName: 'Deploy FakeRestAPI app'
    #           inputs:
    #             azureSubscription: $(subscription)
    #             appName: $(appname)
    #             appType: webApp
    #             package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

    - deployment: VMDeploy
      displayName: Install Dependencies on VM
      environment:
        name: 'WEBAPP-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  cat /etc/*-release
                  sudo apt-get install software-properties-common -y
                  sudo apt-add-repository universe -y
                  sudo apt-get update -y

                  sudo apt-get install python3.6

                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  # python3 -m pip install --upgrade pip
                  pip3 install --upgrade pip
                  pip3 install selenium
                  python3 -V
                  pip3 -V
                  /usr/bin/chromium-browser --version
                  /usr/bin/chromedriver --version
                  python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                
  # - stage: UITest
  #   displayName: UI Testing
  #   jobs:
  #   - deployment: VMUITest
  #     displayName: UI Test In Selenium
  #     environment:
  #       name: 'WEBAPP-TEST'
  #       resourceType: VirtualMachine
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - download: current
  #             displayName: 'Download Selenium Artifact'
  #             artifact: selenium
            
  #           - task: Bash@3
  #             displayName: Run UI Test
  #             inputs:
  #               targetType: 'inline'
  #               script: |
  #                 unzip -o $(Pipeline.Workspace)/selenium/selenium.zip -d .
  #                 sudo mkdir /var/logs
  #                 python3 ui-test.py > ui-logs.log
  #                 sudo mv ui-logs.log /var/logs
